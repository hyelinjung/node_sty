-대부분의 자바스크립트 프로그램은 패키지라는 이름을 npm에 등록되어 있어 특정 기능을 하는 패키지가 필요하면 npm에서 찾아 설치.
-모듈이 다른 모듈을 사용할 수 있는 것처럼 패키지가 다른 패키지를 사용할 수 있다-> 의존 관계
-패키지의 버전을 관리하는 파일-> package.json
-json파일의 script -> 명령어를 저장해둠 -> 보통 start명령어에 node [파일명]을 저장해두고 npm sart로 실행
-npm에는 서버 제작 시 불편함을 해소하고, 편의 기능을 추가한 웹 서버 프레임워크가 있다.-> 대표적으로 익스프레스

-익스프레스 초기 폴더 구조
1.app.js 핵심적인 서버 역할
2.bin/www ->서버를 실행하는 스크립트
3.public -> 외부(브라우저등의 클라이언트)에서 접근 가능한 파일들을 모아둔 곳 ->이미지, 자바스크립트, CSS파일들이 들어있다
4.routes -> 주소별 라우터들을 모아둔 곳
5.views -> 템플릿 파일을 모아둔 곳
=>앞으로 서버 로직은 모두 routes 폴더 안의 파일에 작성하고 데이터베이스를 배우면 데이터 부분은 models 폴더를 만들어 작성
구조가 명확하게 구분되어 있어야 서버를 관리하기 용이 -> MVC 패턴과 비슷하다.

-미들웨어
-> 익스프레스의 핵심으로 요청과 응답의 중간에 위치하고 라우터와 에러 핸들러 또한 미들웨어의 일종이므로 미들웨어가 익스프레스의 전부라고 해도 과언이 아니다. 미들웨어는
요청과 응답을 조작하여 기능을 추가하기도 하고 나쁜 요청을 걸러내기도 한다.
-> 주로 app.use와 함께 사용된다.

-라우터
->익스프레스를 사용하기 전에는 요청 메서드와 주소별로 분기 처리로 코드가 매우 복잡
->익스프레스를 사용해 라우팅을 깔끔하게 관리할 수 있다.
->라우터도 router.use()를 사용하기 때문에 하나의 미들웨어라고 볼수 있음
->라우터에서는 반드시 요청에 대한 응다을 보내거나 에러 핸들러로 요청을 넘겨야 한다.

